
@{
    ViewBag.Title = "Estadisticas";
}

<div class="titulo-ABM">
    <h4 class="create-h4">Estadísticas</h4>
</div>

<div class="container">
    <div class="row">

        <div class="col-md-6">
            <div>
                <h2 style="color: #89bc94;">Pagos</h2>
            </div>
            <div>
                <div class="row">
                    <div class="col-md-2" align="right">
                        @Html.Label("Desde", htmlAttributes: new { @class = "control-label", @style = "margin-top:5px;" })
                    </div>

                    <div class="col-md-8">
                        <div class="input-group datepicker" id="FechaDesde">
                            <span class="input-group-addon primarySpan">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                            <input type="hidden" class="form-control" name="Desde" id="Desde" value="@DateTime.Now.AddDays(-(DateTime.Now.Day-1))"/>
                            <input type="text" class="form-control" readonly="readonly" id="DesdeR" placeholder="DD/MM/YYYY" />
                        </div>
                    </div>
                    <div class="col-md-2"></div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2" align="right">
                        @Html.Label("Hasta", htmlAttributes: new { @class = "control-label", @style = "margin-top:5px;" })
                    </div>

                    <div class="col-md-8">
                        <div class="input-group datepicker" id="FechaHasta">
                            <span class="input-group-addon primarySpan">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                            <input type="hidden" class="form-control" name="Desde" id="Hasta" value="@DateTime.Now"/>
                            <input type="text" class="form-control" readonly="readonly" id="HastaR" placeholder="DD/MM/YYYY" />
                        </div>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-default" id="aceptarPago" style="margin-left: -45px;">Aceptar</button>
                    </div>
                </div>
            </div>
            <div>
                <canvas id="pagosChart" width="500" height="250"></canvas>
            </div>
        </div>
        <div class="col-md-6">
            <div>
                <h2 style="color: #89bc94;">Pacientes</h2>
            </div>
            <div>
                <div class="row">
                    <div class="col-md-2" align="right">
                        @Html.Label("Desde", htmlAttributes: new { @class = "control-label", @style = "margin-top:5px;" })
                    </div>

                    <div class="col-md-8">
                        <div class="input-group datepicker" id="FechaDesdePaciente">
                            <span class="input-group-addon primarySpan">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                            <input type="hidden" class="form-control" name="DesdePaciente" id="DesdePaciente" value="@DateTime.Now.AddDays(-(DateTime.Now.Day-1))" />
                            <input type="text" class="form-control" readonly="readonly" id="DesdeRP" placeholder="DD/MM/YYYY" />
                        </div>
                    </div>
                    <div class="col-md-2"></div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2" align="right">
                        @Html.Label("Hasta", htmlAttributes: new { @class = "control-label", @style = "margin-top:5px;" })
                    </div>

                    <div class="col-md-8">
                        <div class="input-group datepicker" id="FechaHastaPaciente">
                            <span class="input-group-addon primarySpan">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                            <input type="hidden" class="form-control" name="DesdePaciente" id="HastaPaciente" value="@DateTime.Now" />
                            <input type="text" class="form-control" readonly="readonly" id="HastaRP" placeholder="DD/MM/YYYY" />
                        </div>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-default" id="aceptarPaciente" style="margin-left: -45px;">Aceptar</button>
                    </div>
                </div>
            </div>
            <div>
                <canvas id="pacientesChart" width="500" height="250"></canvas>
            </div>
        </div>

    </div>

</div>

@section Scripts {

    <script>
        var pacienteChart;
        var pagosChart;

        $("#FechaDesde").datetimepicker({
            locale: 'es',
            format: 'L'

        });
        $("#FechaHasta").datetimepicker({
            locale: 'es',
            format: 'L'
        });
        $("#FechaDesdePaciente").datetimepicker({
            locale: 'es',
            format: 'L'

        });
        $("#FechaHastaPaciente").datetimepicker({
            locale: 'es',
            format: 'L'
        });
       
        var obtenerPagos = (desde, hasta) => {

            $.get('@Url.Action("ObtenerPagos", "Estadisticas")',
                { fechaDesde: desde, fechaHasta: hasta },
                (pagos) => {

                    graficoPagos(pagos);

                });
        }

        var graficoPagos = (datos) => {

            let fechas = $.map(datos, (val, i) => {
                return val.Fecha;
            });

            let montos = $.map(datos, (val, i) => {
                return parseFloat(val.Monto);
            });

            let backColor = $.map(datos, (val, i) => {
                return val.BackColor;
            });

            let borderColor = $.map(datos, (val, i) => {
                return val.BorderColor;
            });

            var max = 0;
            var min = 0;

            $.each(montos, (index, val) => {
                if (index == 0) {
                    max = val;
                    min = val;
                } else {
                    if (val > max) {
                        max = val;
                    }
                    if (val < min) {
                        min = val;
                    }
                }
            });

            if ((min - 1500) < 0) {
                min = 0;
            } else {
                min = min - 1500;
            }

            var ctx = document.getElementById('pagosChart').getContext('2d');

            pagosChart = new Chart(ctx,
                {
                    type: 'line',
                    data: {
                        labels: fechas,
                        datasets: [
                            {
                                label: 'Pagos',
                                fill: false,
                                data: montos,
                                backgroundColor: backColor,
                                borderColor: borderColor,
                                borderWidth: 1
                            }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true,
                                    min: min,
                                    max: max + 2000
                                }
                            }]
                        }
                    }
                });

        }

        $("#aceptarPago").on("click", (e) => {
                    
            let fechaDesde = $("#Desde").val();
            let fechaHasta = $("#Hasta").val();
            pagosChart.destroy();
            obtenerPagos(fechaDesde, fechaHasta);
        });

        /********** PACIENTE **********/

        var obtenerPacientes = (desde, hasta) => {

            $.get('@Url.Action("ObtenerPacientes", "Estadisticas")',
                { fechaDesde: desde, fechaHasta: hasta },
                (pacientes) => {

                    
                    graficoPacientes(pacientes);
                    

                });
        }

        var graficoPacientes = (datos) => {

            let estados = $.map(datos, (val, i) => {
                return val.Estado;
            });

            let cantidades = $.map(datos, (val, i) => {
                return val.Cantidad;
            });

            let backColor = $.map(datos, (val, i) => {
                return val.BackColor;
            });

            let borderColor = $.map(datos, (val, i) => {
                return val.BorderColor;
            });

            var ctx2 = document.getElementById('pacientesChart').getContext('2d');
            
                
                
             pacientesChart = new Chart(ctx2,
                {
                    type: 'bar',
                    data: {
                        labels: estados,
                        datasets: [
                            {
                                label: 'Pacientes',
                                fill: true,
                                data: cantidades,
                                backgroundColor: backColor,
                                borderColor: borderColor,
                                borderWidth: 1
                            }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true,
                                    stepSize: 10
                                }
                            }],
                            xAxes: [{
                                barThickness: 30
                            }]
                        }
                    }
                });
            
        }

        $("#aceptarPaciente").on("click", (e) => {
                    
            let fechaDesde = $("#DesdePaciente").val();
            let fechaHasta = $("#HastaPaciente").val();
            pacientesChart.destroy();
            obtenerPacientes(fechaDesde, fechaHasta);
        });

        $(() => {
            
            obtenerPagos($("#Desde").val(), $("#Hasta").val());

            obtenerPacientes($("#DesdePaciente").val(), $("#HastaPaciente").val());

        });

    </script>
}